@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'variables';

// === RESPOND ABOVE ===
// @include respond-above(small) {}
@mixin respond-above($breakpoint) {
  @if map.has-key(variables.$breakpoints, $breakpoint) {
    $breakpoint-value: map.get(variables.$breakpoints, $breakpoint);

    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BELOW ===
// @include respond-below(small) {}
@mixin respond-below($breakpoint) {
  @if map.has-key(variables.$breakpoints, $breakpoint) {
    $breakpoint-value: map.get(variables.$breakpoints, $breakpoint);

    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BETWEEN ===
// @include respond-between(small, medium);
@mixin respond-between($lower, $upper) {
  @if map.has-key(variables.$breakpoints, $lower) and
    map.has-key(variables.$breakpoints, $upper)
  {
    $lower-breakpoint: map.get(variables.$breakpoints, $lower);
    $upper-breakpoint: map.get(variables.$breakpoints, $upper);

    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map.has-key(variables.$breakpoints, $lower) ==false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    @if (map.has-key(variables.$breakpoints, $upper) ==false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-shadow($shadow) {
  box-shadow: $shadow;
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin transform($value) {
  -ms-transform: $value;
  -webkit-transform: $value;
  transform: $value;
}

@mixin transformX($transition) {
  -ms-transform: translateX($transition);
  -webkit-transform: translateX($transition);
  transform: translateX($transition);
}

@mixin transformY($transition) {
  -ms-transform: translateY($transition);
  -webkit-transform: translateY($transition);
  transform: translateY($transition);
}

@mixin opacity($opacity) {
  -webkit-opacity: $opacity;
  -moz-opacity: $opacity;
  opacity: $opacity;
}

@mixin clearfix() {
  &::after {
    display: block;
    content: '';
    clear: both;
  }
}

@mixin font-icon($icon) {
  content: map.get($font-icon, $icon);
  font-family: map.get($font-family, icon);
  -webkit-font-smoothing: antialiased;
}

@mixin border-box($border-box) {
  -webkit-box-sizing: $border-box;
  -moz-box-sizing: $border-box;
  box-sizing: $border-box;
}

@mixin text-fill-color($prColor) {
  -webkit-text-fill-color: map.get(variables.$color, $prColor) !important;
}

@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  flex-direction: $direction;
}

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

@mixin ellipsis-special($number: null) {
  overflow: hidden;

  @if meta.type-of($number) !=number {
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: box;
    display: -moz-box;
    display: -webkit-box;
    display: -ms-box;
    box-orient: vertical;
    -moz-box-orient: vertical;
    -ms-line-clamp: $number;
    -moz-line-clamp: $number;
    -webkit-line-clamp: $number;
    word-wrap: break-word;
    white-space: normal;
    /*! autoprefixer: off */
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
  }
}

// === CONVERT PXREM ===
@function strip-units($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function convertRootPxToEm($value) {
  // check for null:
  @if ($value ==null) {
    @return $value;
  }

  // assume em:
  @if (math.is-unitless($value) or math.unit($value) ==em) {
    @return 0em + $value;
  } @else {
    @return 0em + strip-units($value) / 16;
  }
}

@function convertPxToRem($px) {
  @return 0rem + math.div(strip-units($px), 16);
}

@mixin pxRem($property, $values) {
  // Create a couple of empty lists as output buffers:
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if meta.type-of($values) != 'list' {
    $values: list.join((), $values);
  }

  // Loop through the $values list:
  @each $value in $values {
    @if meta.type-of($value)
      ==number and
      (math.is-unitless($value) or math.unit($value) ==px)
    {
      $px-values: list.join($px-values, 0px + ($value));
      $rem-values: list.join($rem-values, convertPxToRem($value));
    } @else {
      // no conversion:
      $px-values: list.join($px-values, $value);
      $rem-values: list.join($rem-values, $value);
    }
  }

  #{$property}: $px-values;

  // don't add media query if it's not needed:
  @if $px-values !=$rem-values {
    // @media only all {
    #{$property}: $rem-values;
    // }
  }
}

// == End / Convert Px To Rem

@mixin animation($animation) {
  -webkit-animation: $animation;
  animation: $animation;
}

@mixin animation-delay($delay) {
  -webkit-animation-delay: $delay;
  animation-delay: $delay;
}
